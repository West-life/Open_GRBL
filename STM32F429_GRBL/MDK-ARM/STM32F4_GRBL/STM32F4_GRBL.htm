<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F4_GRBL\STM32F4_GRBL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F4_GRBL\STM32F4_GRBL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Oct 27 22:50:08 2021
<BR><P>
<H3>Maximum Stack Usage =        816 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
grbl_main_task &rArr; protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[f3]">delay_sec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f4]">protocol_execute_realtime</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from limits.o(i.EXTI0_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from hal_tim.o(i.TIM3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from hal_tim.o(i.TIM4_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from serial.o(i.USART1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[6a]">f_led_task</a> from led_task.o(i.f_led_task) referenced from led_task.o(i.led_task_creat)
 <LI><a href="#[68]">fputc</a> from hal_uart.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[69]">grbl_main_task</a> from grbl_main.o(i.grbl_main_task) referenced from grbl_main.o(i.grbl_task_create)
 <LI><a href="#[6d]">hal_w25qxx_spi_init</a> from hal_w25qxx.o(i.hal_w25qxx_spi_init) referenced from hal_w25qxx.o(i.w25qxx_init)
 <LI><a href="#[65]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6c]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[6b]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[6f]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[6e]">w25qxx_write_read_16</a> from hal_w25qxx.o(i.w25qxx_write_read_16) referenced from hal_w25qxx.o(i.w25qxx_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[205]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[70]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[89]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[206]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[207]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[208]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[209]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[20a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[20b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1fe]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1fd]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20c]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_gpio_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_limit_gpio_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_w25qxx_spi_gpio_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10b]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[212]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[213]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[214]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
</UL>

<P><STRONG><a name="[216]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[86]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[87]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[88]"></a>_dfix_r</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, dfixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _dfix_r
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
</UL>

<P><STRONG><a name="[71]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[217]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, limits.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EXTI0_IRQHandler &rArr; mc_reset &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[93]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[94]"></a>FLASH_FlushCaches</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[8d]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buff
</UL>

<P><STRONG><a name="[90]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buff
</UL>

<P><STRONG><a name="[13c]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buff
</UL>

<P><STRONG><a name="[95]"></a>HAL_FLASH_Program</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buff
</UL>

<P><STRONG><a name="[13a]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buff
</UL>

<P><STRONG><a name="[13d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_led_gpio_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_gpio_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_limit_gpio_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_motor_en_gpio_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_motor_dir_gpio_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_motor_axis_gpio_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_w25qxx_spi_gpio_init
</UL>

<P><STRONG><a name="[144]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_limits_get_gpio_status
</UL>

<P><STRONG><a name="[13f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_led_off
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_step_en_gpio_set
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_step_gpio_status
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_dir_gpio_status
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_disable
</UL>

<P><STRONG><a name="[8e]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[ba]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[9a]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>HAL_InitTick</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[142]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_limit_gpio_irq_disable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_timer_irq_disable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_timer_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_timer_irq_disable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_timer_init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_limit_gpio_irq_enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_timer_irq_enable
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_timer_irq_enable
</UL>

<P><STRONG><a name="[9e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_limit_gpio_irq_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_timer_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_timer_init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a0]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a9]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[a1]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[aa]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ab]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1172 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ac]"></a>HAL_SPI_Init</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_begin
</UL>

<P><STRONG><a name="[ad]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[ae]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 554 bytes, Stack size 56 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_transfer_revice_byte
</UL>

<P><STRONG><a name="[b7]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_timer_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_timer_init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_timer_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_timer_init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; set_timer_irq_handler &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; set_timer_irq_handler &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_irq_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer_irq_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[be]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_UART_Transmit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_sendbyte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>MX_GPIO_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>STMFLASH_ReadWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_flash_eeprom.o(i.STMFLASH_ReadWord))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buff
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_buf
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>SystemClock_Config</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_tim.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; set_timer_irq_handler &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_tim.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; set_timer_irq_handler &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; set_timer_irq_handler &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, serial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART1_IRQHandler &rArr; mc_reset &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_usrt_status_reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_uart_dr_reg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clean_isr
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_motion_override_flag
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_accessory_override_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[218]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[c2]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_report_mcu_info
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buff
</UL>

<P><STRONG><a name="[d2]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[d0]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[d6]"></a>__hardfp_atan2</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[db]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[dd]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[10d]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[e2]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[e3]"></a>__hardfp_lround</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, lround.o(i.__hardfp_lround))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp_lround &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[e5]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[e6]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[e7]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[e8]"></a>__hardfp_trunc</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, trunc.o(i.__hardfp_trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp_trunc &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[df]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[e1]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[d5]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[e0]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[d1]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[d7]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[de]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[d3]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[219]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[21a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[21b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[da]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[e9]"></a>_delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, grbl_main.o(i._delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[d8]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[ed]"></a>convert_delta_vector_to_unit_vector</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, nuts_bolts.o(i.convert_delta_vector_to_unit_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = convert_delta_vector_to_unit_vector &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[191]"></a>coolant_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coolant_control.o(i.coolant_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[12a]"></a>coolant_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, coolant_control.o(i.coolant_init))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[f1]"></a>coolant_set_state</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, coolant_control.o(i.coolant_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[178]"></a>coolant_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, coolant_control.o(i.coolant_stop))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>

<P><STRONG><a name="[ef]"></a>coolant_sync</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, coolant_control.o(i.coolant_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = coolant_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[f2]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nuts_bolts.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
</UL>

<P><STRONG><a name="[f3]"></a>delay_sec</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nuts_bolts.o(i.delay_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + In Cycle
<LI>Call Chain = delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[f6]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[102]"></a>disk_ioctl</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[f8]"></a>disk_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_read &rArr; w25qxx_buffer_read &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[f7]"></a>disk_status</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[fa]"></a>disk_write</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disk_write &rArr; w25qxx_buffer_write &rArr; w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_buffer_write
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[fd]"></a>eeprom_get_char</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eeprom.o(i.eeprom_get_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eeprom_get_char
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eeprom_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_global_settings
</UL>

<P><STRONG><a name="[17c]"></a>eeprom_put_char</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eeprom.o(i.eeprom_put_char))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_global_settings
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
</UL>

<P><STRONG><a name="[6a]"></a>f_led_task</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_task.o(i.f_led_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = f_led_task &rArr; hal_led_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_led_gpio_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_task.o(i.led_task_creat)
</UL>
<P><STRONG><a name="[100]"></a>f_mkfs</STRONG> (Thumb, 1622 bytes, Stack size 112 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; w25qxx_buffer_write &rArr; w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; w25qxx_buffer_write &rArr; w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[68]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hal_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[108]"></a>gc_execute_line</STRONG> (Thumb, 5918 bytes, Stack size 192 bytes, gcode.o(i.gc_execute_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[119]"></a>gc_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gcode.o(i.gc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = gc_init &rArr; settings_read_coord_data &rArr; settings_write_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[116]"></a>gc_sync_position</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gcode.o(i.gc_sync_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gc_sync_position &rArr; system_convert_array_steps_to_mpos
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[11c]"></a>get_direction_pin_mask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, settings.o(i.get_direction_pin_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_direction_pin_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_moter_dir_gpio_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_generate_step_dir_invert_masks
</UL>

<P><STRONG><a name="[105]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[11e]"></a>get_limit_pin_mask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, settings.o(i.get_limit_pin_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_limit_pin_mask &rArr; hal_limits_get_gpio_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_limits_get_gpio_status
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
</UL>

<P><STRONG><a name="[120]"></a>get_step_pin_mask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, settings.o(i.get_step_pin_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_step_pin_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_moter_axis_gpio_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_generate_step_dir_invert_masks
</UL>

<P><STRONG><a name="[69]"></a>grbl_main_task</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, grbl_main.o(i.grbl_main_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = grbl_main_task &rArr; protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eeprom_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_reset_read_buffer
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_message
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grbl_main.o(i.grbl_task_create)
</UL>
<P><STRONG><a name="[132]"></a>grbl_report_mcu_info</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, grbl_hal.o(i.grbl_report_mcu_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = grbl_report_mcu_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>grbl_task_create</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, grbl_main.o(i.grbl_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = grbl_task_create &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>hal_clean_isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_uart.o(i.hal_clean_isr))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>hal_eeprom_flush</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_flash_eeprom.o(i.hal_eeprom_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hal_eeprom_flush &rArr; hal_flash_write_buff &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
</UL>

<P><STRONG><a name="[fe]"></a>hal_eeprom_get_char</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_flash_eeprom.o(i.hal_eeprom_get_char))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_get_char
</UL>

<P><STRONG><a name="[123]"></a>hal_eeprom_init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, hal_flash_eeprom.o(i.hal_eeprom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_eeprom_init &rArr; hal_flash_read_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[138]"></a>hal_flash_read_buf</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, hal_flash_eeprom.o(i.hal_flash_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_flash_read_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eeprom_init
</UL>

<P><STRONG><a name="[122]"></a>hal_flash_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_flash_eeprom.o(i.hal_flash_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[137]"></a>hal_flash_write_buff</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, hal_flash_eeprom.o(i.hal_flash_write_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hal_flash_write_buff &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_flash_sector
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eeprom_flush
</UL>

<P><STRONG><a name="[13b]"></a>hal_get_flash_sector</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, hal_flash_eeprom.o(i.hal_get_flash_sector))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buff
</UL>

<P><STRONG><a name="[121]"></a>hal_get_moter_axis_gpio_mask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_gpio.o(i.hal_get_moter_axis_gpio_mask))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_pin_mask
</UL>

<P><STRONG><a name="[11d]"></a>hal_get_moter_dir_gpio_mask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_gpio.o(i.hal_get_moter_dir_gpio_mask))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_direction_pin_mask
</UL>

<P><STRONG><a name="[1dc]"></a>hal_is_uart_sr_txe</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart.o(i.hal_is_uart_sr_txe))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>

<P><STRONG><a name="[ff]"></a>hal_led_gpio_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, hal_gpio.o(i.hal_led_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_led_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_led_task
</UL>

<P><STRONG><a name="[13e]"></a>hal_led_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_gpio.o(i.hal_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_led_off
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>hal_limit_gpio_init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, hal_gpio.o(i.hal_limit_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_limit_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
</UL>

<P><STRONG><a name="[141]"></a>hal_limit_gpio_irq_disable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_gpio.o(i.hal_limit_gpio_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_limit_gpio_irq_disable &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_disable
</UL>

<P><STRONG><a name="[143]"></a>hal_limit_gpio_irq_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_gpio.o(i.hal_limit_gpio_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_limit_gpio_irq_enable &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
</UL>

<P><STRONG><a name="[11f]"></a>hal_limits_get_gpio_status</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_gpio.o(i.hal_limits_get_gpio_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_limits_get_gpio_status
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_limit_pin_mask
</UL>

<P><STRONG><a name="[148]"></a>hal_motor_gpio_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_gpio.o(i.hal_motor_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_motor_gpio_init &rArr; hal_motor_en_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_motor_en_gpio_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_motor_dir_gpio_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_motor_axis_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
</UL>

<P><STRONG><a name="[c9]"></a>hal_read_uart_dr_reg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart.o(i.hal_read_uart_dr_reg))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>hal_read_usrt_status_reg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_uart.o(i.hal_read_usrt_status_reg))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>hal_reset_timer_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hal_tim.o(i.hal_reset_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_reset_timer_init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
</UL>

<P><STRONG><a name="[14a]"></a>hal_reset_timer_irq_disable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_tim.o(i.hal_reset_timer_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_reset_timer_irq_disable &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer_irq_handler
</UL>

<P><STRONG><a name="[14b]"></a>hal_reset_timer_irq_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_tim.o(i.hal_reset_timer_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_reset_timer_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_irq_handler
</UL>

<P><STRONG><a name="[14c]"></a>hal_set_dir_gpio_status</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hal_gpio.o(i.hal_set_dir_gpio_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_set_dir_gpio_status
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_irq_handler
</UL>

<P><STRONG><a name="[14d]"></a>hal_set_step_gpio_status</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hal_gpio.o(i.hal_set_step_gpio_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_set_step_gpio_status
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_irq_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer_irq_handler
</UL>

<P><STRONG><a name="[14e]"></a>hal_set_timer_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hal_tim.o(i.hal_set_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_set_timer_init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
</UL>

<P><STRONG><a name="[14f]"></a>hal_set_timer_irq_disable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_tim.o(i.hal_set_timer_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_set_timer_irq_disable &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
</UL>

<P><STRONG><a name="[150]"></a>hal_set_timer_irq_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_tim.o(i.hal_set_timer_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_set_timer_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
</UL>

<P><STRONG><a name="[151]"></a>hal_spi_begin</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hal_spi.o(i.hal_spi_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_spi_begin &rArr; set_spi_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_trans_mode
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_speed
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_others
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_mode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_irq_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_first_bit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_date_size
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_clk
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_w25qxx_spi_init
</UL>

<P><STRONG><a name="[1f6]"></a>hal_spi_register</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_spi.o(i.hal_spi_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_spi_register
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[15b]"></a>hal_spi_transfer_revice_byte</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, hal_spi.o(i.hal_spi_transfer_revice_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hal_spi_transfer_revice_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_read_16
</UL>

<P><STRONG><a name="[15c]"></a>hal_step_en_gpio_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_gpio.o(i.hal_step_en_gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_step_en_gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
</UL>

<P><STRONG><a name="[1eb]"></a>hal_tim_clear_flag_update</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_tim.o(i.hal_tim_clear_flag_update))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
</UL>

<P><STRONG><a name="[1ea]"></a>hal_tim_generateEvent_update</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_tim.o(i.hal_tim_generateEvent_update))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
</UL>

<P><STRONG><a name="[1dd]"></a>hal_tim_set_reload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_tim.o(i.hal_tim_set_reload))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_irq_handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
</UL>

<P><STRONG><a name="[15d]"></a>hal_uart_gpio_init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, hal_uart.o(i.hal_uart_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_uart_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[15e]"></a>hal_uart_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hal_uart.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hal_uart_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>hal_uart_sendbyte</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_uart.o(i.hal_uart_sendbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>

<P><STRONG><a name="[6d]"></a>hal_w25qxx_spi_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_w25qxx.o(i.hal_w25qxx_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_w25qxx_spi_init &rArr; hal_w25qxx_spi_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_begin
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_w25qxx_spi_gpio_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_w25qxx.o(i.w25qxx_init)
</UL>
<P><STRONG><a name="[10c]"></a>hypot_f</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nuts_bolts.o(i.hypot_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hypot_f &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[10e]"></a>jog_execute</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, jog.o(i.jog_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = jog_execute &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[165]"></a>led_task_creat</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, led_task.o(i.led_task_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = led_task_creat &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>limit_value_by_axis_maximum</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, nuts_bolts.o(i.limit_value_by_axis_maximum))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = limit_value_by_axis_maximum &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[167]"></a>limits_disable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, limits.o(i.limits_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = limits_disable &rArr; hal_limit_gpio_irq_disable &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_limit_gpio_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
</UL>

<P><STRONG><a name="[168]"></a>limits_get_state</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, limits.o(i.limits_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = limits_get_state &rArr; get_limit_pin_mask &rArr; hal_limits_get_gpio_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_limit_pin_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[169]"></a>limits_go_home</STRONG> (Thumb, 884 bytes, Stack size 120 bytes, limits.o(i.limits_go_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = limits_go_home &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_state_flag
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_pin_mask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[12b]"></a>limits_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, limits.o(i.limits_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = limits_init &rArr; hal_limit_gpio_irq_enable &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_limit_gpio_irq_enable
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_limit_gpio_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[16c]"></a>limits_soft_check</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, limits.o(i.limits_soft_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = limits_soft_check &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = main &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; w25qxx_buffer_write &rArr; w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task_creat
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_led_off
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_led_gpio_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_task_create
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_report_mcu_info
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[114]"></a>mc_arc</STRONG> (Thumb, 1172 bytes, Stack size 136 bytes, motion_control.o(i.mc_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[110]"></a>mc_dwell</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, motion_control.o(i.mc_dwell))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mc_dwell &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[171]"></a>mc_homing_cycle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, motion_control.o(i.mc_homing_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = mc_homing_cycle &rArr; limits_go_home &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_disable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[113]"></a>mc_line</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, motion_control.o(i.mc_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_check_full_buffer
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[115]"></a>mc_probe_cycle</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, motion_control.o(i.mc_probe_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mc_probe_cycle &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_get_state
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_configure_invert_mask
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[8b]"></a>mc_reset</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, motion_control.o(i.mc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc_reset &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_stop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[17a]"></a>memcpy_from_eeprom_with_checksum</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, eeprom.o(i.memcpy_from_eeprom_with_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memcpy_from_eeprom_with_checksum &rArr; eeprom_get_char
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_global_settings
</UL>

<P><STRONG><a name="[17b]"></a>memcpy_to_eeprom_with_checksum</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, eeprom.o(i.memcpy_to_eeprom_with_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = memcpy_to_eeprom_with_checksum &rArr; hal_eeprom_flush &rArr; hal_flash_write_buff &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_eeprom_flush
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_global_settings
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_build_info
</UL>

<P><STRONG><a name="[16a]"></a>plan_buffer_line</STRONG> (Thumb, 944 bytes, Stack size 128 bytes, planner.o(i.plan_buffer_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = plan_buffer_line &rArr; plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_direction_pin_mask
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_next_block_index
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_parameters
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[172]"></a>plan_check_full_buffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, planner.o(i.plan_check_full_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[17e]"></a>plan_compute_profile_nominal_speed</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, planner.o(i.plan_compute_profile_nominal_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[182]"></a>plan_cycle_reinitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, planner.o(i.plan_cycle_reinitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = plan_cycle_reinitialize &rArr; planner_recalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[184]"></a>plan_discard_current_block</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, planner.o(i.plan_discard_current_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = plan_discard_current_block
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_next_block_index
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[1d5]"></a>plan_get_block_buffer_available</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, planner.o(i.plan_get_block_buffer_available))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[162]"></a>plan_get_current_block</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, planner.o(i.plan_get_current_block))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[185]"></a>plan_get_exec_block_exit_speed_sqr</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, planner.o(i.plan_get_exec_block_exit_speed_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = plan_get_exec_block_exit_speed_sqr
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_next_block_index
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[1e7]"></a>plan_get_system_motion_block</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, planner.o(i.plan_get_system_motion_block))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[180]"></a>plan_next_block_index</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, planner.o(i.plan_next_block_index))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_exec_block_exit_speed_sqr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_discard_current_block
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[12d]"></a>plan_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, planner.o(i.plan_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = plan_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset_buffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[186]"></a>plan_reset_buffer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, planner.o(i.plan_reset_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
</UL>

<P><STRONG><a name="[12f]"></a>plan_sync_position</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(i.plan_sync_position))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[187]"></a>plan_update_velocity_profile_parameters</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, planner.o(i.plan_update_velocity_profile_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = plan_update_velocity_profile_parameters &rArr; plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_next_block_index
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[189]"></a>printFloat</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, print.o(i.printFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
</UL>

<P><STRONG><a name="[18b]"></a>printFloat_CoordValue</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, print.o(i.printFloat_CoordValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
</UL>

<P><STRONG><a name="[18c]"></a>printFloat_RateValue</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, print.o(i.printFloat_RateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = printFloat_RateValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[18d]"></a>printString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, print.o(i.printString))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_message
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_help
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_gcode_modes_M
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_gcode_modes_G
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
</UL>

<P><STRONG><a name="[18e]"></a>print_uint8_base10</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, print.o(i.print_uint8_base10))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = print_uint8_base10 &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_setting_prefix
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
</UL>

<P><STRONG><a name="[174]"></a>probe_configure_invert_mask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, probe.o(i.probe_configure_invert_mask))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[175]"></a>probe_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, probe.o(i.probe_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_state_monitor
</UL>

<P><STRONG><a name="[12c]"></a>probe_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, probe.o(i.probe_init))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[18f]"></a>probe_state_monitor</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, probe.o(i.probe_state_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = probe_state_monitor
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_irq_handler
</UL>

<P><STRONG><a name="[173]"></a>protocol_auto_cycle_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, protocol.o(i.protocol_auto_cycle_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protocol_auto_cycle_start
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[f0]"></a>protocol_buffer_synchronize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, protocol.o(i.protocol_buffer_synchronize))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
</UL>

<P><STRONG><a name="[f5]"></a>protocol_exec_rt_system</STRONG> (Thumb, 1164 bytes, Stack size 16 bytes, protocol.o(i.protocol_exec_rt_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = protocol_exec_rt_system &rArr; st_prep_buffer &rArr; plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_state_flag
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_motion_overrides
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_alarm
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_accessory_overrides
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[f4]"></a>protocol_execute_realtime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, protocol.o(i.protocol_execute_realtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[131]"></a>protocol_main_loop</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, protocol.o(i.protocol_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_safety_door_ajar
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_read
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[1c4]"></a>pvPortMalloc</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1b0]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[109]"></a>read_float</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, nuts_bolts.o(i.read_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = read_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[1c7]"></a>read_global_settings</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, settings.o(i.read_global_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read_global_settings &rArr; memcpy_from_eeprom_with_checksum &rArr; eeprom_get_char
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
</UL>

<P><STRONG><a name="[193]"></a>report_alarm_message</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, report.o(i.report_alarm_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = report_alarm_message &rArr; report_util_line_feed &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[1c9]"></a>report_build_info</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, report.o(i.report_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = report_build_info &rArr; report_util_feedback_line_feed &rArr; report_util_line_feed &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[1cb]"></a>report_execute_startup_message</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, report.o(i.report_execute_startup_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = report_execute_startup_message &rArr; report_status_message &rArr; report_util_line_feed &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
</UL>

<P><STRONG><a name="[118]"></a>report_feedback_message</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, report.o(i.report_feedback_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = report_feedback_message &rArr; report_util_feedback_line_feed &rArr; report_util_line_feed &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[1cc]"></a>report_gcode_modes</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, report.o(i.report_gcode_modes))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = report_gcode_modes &rArr; printFloat_RateValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_gcode_modes_M
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_gcode_modes_G
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[1cf]"></a>report_grbl_help</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, report.o(i.report_grbl_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = report_grbl_help &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[1d0]"></a>report_grbl_settings</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, report.o(i.report_grbl_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = report_grbl_settings &rArr; report_util_float_setting &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[130]"></a>report_init_message</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, report.o(i.report_init_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = report_init_message &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[1d3]"></a>report_ngc_parameters</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, report.o(i.report_ngc_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = report_ngc_parameters &rArr; settings_read_coord_data &rArr; settings_write_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[176]"></a>report_probe_parameters</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, report.o(i.report_probe_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = report_probe_parameters &rArr; report_util_axis_values &rArr; printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[195]"></a>report_realtime_status</STRONG> (Thumb, 880 bytes, Stack size 72 bytes, report.o(i.report_realtime_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = report_realtime_status &rArr; report_util_axis_values &rArr; printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_block_buffer_available
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_get_state
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_get_state
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_control_get_state
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_get_realtime_rate
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_state
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_rx_buffer_available
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[1da]"></a>report_startup_line</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, report.o(i.report_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = report_startup_line &rArr; report_util_line_feed &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[11a]"></a>report_status_message</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, report.o(i.report_status_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = report_status_message &rArr; report_util_line_feed &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[1db]"></a>report_util_setting_prefix</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, report.o(i.report_util_setting_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = report_util_setting_prefix &rArr; print_uint8_base10 &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
</UL>

<P><STRONG><a name="[bb]"></a>reset_timer_irq_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stepper.o(i.reset_timer_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reset_timer_irq_handler &rArr; hal_reset_timer_irq_disable &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_step_gpio_status
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_timer_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1d6]"></a>serial_get_rx_buffer_available</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, serial.o(i.serial_get_rx_buffer_available))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[124]"></a>serial_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, serial.o(i.serial_init))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[19a]"></a>serial_read</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, serial.o(i.serial_read))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[128]"></a>serial_reset_read_buffer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(i.serial_reset_read_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[18a]"></a>serial_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, serial.o(i.serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_sendbyte
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_is_uart_sr_txe
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_setting_prefix
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>

<P><STRONG><a name="[152]"></a>set_spi_clk</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, hal_spi.o(i.set_spi_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_spi_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_begin
</UL>

<P><STRONG><a name="[156]"></a>set_spi_date_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_spi.o(i.set_spi_date_size))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_begin
</UL>

<P><STRONG><a name="[157]"></a>set_spi_first_bit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_spi.o(i.set_spi_first_bit))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_begin
</UL>

<P><STRONG><a name="[158]"></a>set_spi_irq_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_spi.o(i.set_spi_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_begin
</UL>

<P><STRONG><a name="[154]"></a>set_spi_mode</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hal_spi.o(i.set_spi_mode))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_begin
</UL>

<P><STRONG><a name="[159]"></a>set_spi_others</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_spi.o(i.set_spi_others))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_begin
</UL>

<P><STRONG><a name="[153]"></a>set_spi_speed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_spi.o(i.set_spi_speed))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_begin
</UL>

<P><STRONG><a name="[15a]"></a>set_spi_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_spi.o(i.set_spi_start))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_begin
</UL>

<P><STRONG><a name="[155]"></a>set_spi_trans_mode</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hal_spi.o(i.set_spi_trans_mode))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_begin
</UL>

<P><STRONG><a name="[bc]"></a>set_timer_irq_handler</STRONG> (Thumb, 606 bytes, Stack size 8 bytes, stepper.o(i.set_timer_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_timer_irq_handler &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_step_gpio_status
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_dir_gpio_status
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tim_set_reload
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_timer_irq_enable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_speed
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_state_monitor
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[125]"></a>settings_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, settings.o(i.settings_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = settings_init &rArr; settings_restore &rArr; settings_write_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_global_settings
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[1e0]"></a>settings_read_build_info</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, settings.o(i.settings_read_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = settings_read_build_info &rArr; settings_store_build_info &rArr; memcpy_to_eeprom_with_checksum &rArr; hal_eeprom_flush &rArr; hal_flash_write_buff &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_build_info
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[10a]"></a>settings_read_coord_data</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, settings.o(i.settings_read_coord_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = settings_read_coord_data &rArr; settings_write_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[1e2]"></a>settings_read_startup_line</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, settings.o(i.settings_read_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = settings_read_startup_line &rArr; settings_store_startup_line &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[1df]"></a>settings_restore</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, settings.o(i.settings_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = settings_restore &rArr; settings_write_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_put_char
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_global_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[1e1]"></a>settings_store_build_info</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, settings.o(i.settings_store_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = settings_store_build_info &rArr; memcpy_to_eeprom_with_checksum &rArr; hal_eeprom_flush &rArr; hal_flash_write_buff &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[1e5]"></a>settings_store_global_setting</STRONG> (Thumb, 776 bytes, Stack size 40 bytes, settings.o(i.settings_store_global_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = settings_store_global_setting &rArr; system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_configure_invert_mask
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_generate_step_dir_invert_masks
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_global_settings
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[1e3]"></a>settings_store_startup_line</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, settings.o(i.settings_store_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = settings_store_startup_line &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[112]"></a>settings_write_coord_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, settings.o(i.settings_write_coord_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = settings_write_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
</UL>

<P><STRONG><a name="[1e9]"></a>spindle_compute_pwm_value</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spindle_control.o(i.spindle_compute_pwm_value))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[1d9]"></a>spindle_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spindle_control.o(i.spindle_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[129]"></a>spindle_init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, spindle_control.o(i.spindle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spindle_init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[1de]"></a>spindle_set_speed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spindle_control.o(i.spindle_set_speed))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_irq_handler
</UL>

<P><STRONG><a name="[117]"></a>spindle_set_state</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spindle_control.o(i.spindle_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[177]"></a>spindle_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spindle_control.o(i.spindle_stop))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
</UL>

<P><STRONG><a name="[10f]"></a>spindle_sync</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spindle_control.o(i.spindle_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[1e6]"></a>st_generate_step_dir_invert_masks</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stepper.o(i.st_generate_step_dir_invert_masks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_generate_step_dir_invert_masks &rArr; get_direction_pin_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_direction_pin_mask
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_pin_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[1d7]"></a>st_get_realtime_rate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stepper.o(i.st_get_realtime_rate))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[179]"></a>st_go_idle</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stepper.o(i.st_go_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_step_en_gpio_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_timer_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_irq_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[163]"></a>st_prep_buffer</STRONG> (Thumb, 3916 bytes, Stack size 144 bytes, stepper.o(i.st_prep_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = st_prep_buffer &rArr; plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_system_motion_block
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_exec_block_exit_speed_sqr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_discard_current_block
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_next_block_index
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[12e]"></a>st_reset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stepper.o(i.st_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = st_reset &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_generate_step_dir_invert_masks
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[183]"></a>st_update_plan_block_parameters</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stepper.o(i.st_update_plan_block_parameters))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[164]"></a>st_wake_up</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stepper.o(i.st_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_wake_up &rArr; hal_step_en_gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_step_en_gpio_set
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tim_set_reload
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tim_generateEvent_update
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tim_clear_flag_update
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_timer_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[126]"></a>stepper_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stepper.o(i.stepper_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stepper_init &rArr; hal_motor_gpio_init &rArr; hal_motor_en_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_motor_gpio_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_set_timer_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_reset_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[192]"></a>system_check_safety_door_ajar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(i.system_check_safety_door_ajar))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[161]"></a>system_check_travel_limits</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system.o(i.system_check_travel_limits))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[197]"></a>system_clear_exec_accessory_overrides</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(i.system_clear_exec_accessory_overrides))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[194]"></a>system_clear_exec_alarm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(i.system_clear_exec_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[196]"></a>system_clear_exec_motion_overrides</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(i.system_clear_exec_motion_overrides))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[16b]"></a>system_clear_exec_state_flag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system.o(i.system_clear_exec_state_flag))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[1d8]"></a>system_control_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(i.system_control_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[11b]"></a>system_convert_array_steps_to_mpos</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, system.o(i.system_convert_array_steps_to_mpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = system_convert_array_steps_to_mpos
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_axis_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[1ec]"></a>system_convert_axis_steps_to_mpos</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system.o(i.system_convert_axis_steps_to_mpos))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
</UL>

<P><STRONG><a name="[199]"></a>system_execute_line</STRONG> (Thumb, 878 bytes, Stack size 40 bytes, system.o(i.system_execute_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_build_info
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_help
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_safety_door_ajar
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[198]"></a>system_execute_startup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, system.o(i.system_execute_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[111]"></a>system_flag_wco_change</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system.o(i.system_flag_wco_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[127]"></a>system_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(i.system_init))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_main_task
</UL>

<P><STRONG><a name="[cc]"></a>system_set_exec_accessory_override_flag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system.o(i.system_set_exec_accessory_override_flag))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[8c]"></a>system_set_exec_alarm</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system.o(i.system_set_exec_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[cb]"></a>system_set_exec_motion_override_flag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system.o(i.system_set_exec_motion_override_flag))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>system_set_exec_state_flag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system.o(i.system_set_exec_state_flag))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer_irq_handler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[19c]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1a2]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1af]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[19e]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[19d]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[16f]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[170]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1ab]"></a>vPortFree</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1fc]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1a4]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1be]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[ea]"></a>vTaskDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_led_task
</UL>

<P><STRONG><a name="[200]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c3]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1ee]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ed]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[135]"></a>vTaskStartScheduler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_task_create
</UL>

<P><STRONG><a name="[1bc]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[72]"></a>vTaskSwitchContext</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[f9]"></a>w25qxx_buffer_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hal_w25qxx.o(i.w25qxx_buffer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = w25qxx_buffer_read &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_write_byte
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[fc]"></a>w25qxx_buffer_write</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, hal_w25qxx.o(i.w25qxx_buffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = w25qxx_buffer_write &rArr; w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1f3]"></a>w25qxx_disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_w25qxx.o(i.w25qxx_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = w25qxx_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_sr_reg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_id
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enter_flash_mode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_buffer_read
</UL>

<P><STRONG><a name="[1f1]"></a>w25qxx_enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_w25qxx.o(i.w25qxx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = w25qxx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_sr_reg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_id
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enter_flash_mode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_buffer_read
</UL>

<P><STRONG><a name="[1f5]"></a>w25qxx_enter_flash_mode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_w25qxx.o(i.w25qxx_enter_flash_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = w25qxx_enter_flash_mode &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_write_byte
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[16e]"></a>w25qxx_init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, hal_w25qxx.o(i.w25qxx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = w25qxx_init &rArr; w25qxx_read_id &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_register
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_id
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enter_flash_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f4]"></a>w25qxx_page_write</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hal_w25qxx.o(i.w25qxx_page_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_write_byte
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_buffer_write
</UL>

<P><STRONG><a name="[1f7]"></a>w25qxx_read_id</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hal_w25qxx.o(i.w25qxx_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = w25qxx_read_id &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_write_byte
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
</UL>

<P><STRONG><a name="[1fa]"></a>w25qxx_read_sr_reg</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hal_w25qxx.o(i.w25qxx_read_sr_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_write_byte
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
</UL>

<P><STRONG><a name="[1f2]"></a>w25qxx_read_write_byte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_w25qxx.o(i.w25qxx_read_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_write_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_sr_reg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_id
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enter_flash_mode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_buffer_read
</UL>

<P><STRONG><a name="[1fb]"></a>w25qxx_read_write_cb</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_w25qxx.o(i.w25qxx_read_write_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w25qxx_read_write_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_write_byte
</UL>

<P><STRONG><a name="[fb]"></a>w25qxx_sector_erase</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_w25qxx.o(i.w25qxx_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = w25qxx_sector_erase &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_write_byte
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1f9]"></a>w25qxx_wait_busy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_w25qxx.o(i.w25qxx_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_sr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_write
</UL>

<P><STRONG><a name="[1f8]"></a>w25qxx_write_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_w25qxx.o(i.w25qxx_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = w25qxx_write_enable &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_write_byte
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_sector_erase
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_page_write
</UL>

<P><STRONG><a name="[6e]"></a>w25qxx_write_read_16</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_w25qxx.o(i.w25qxx_write_read_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = w25qxx_write_read_16 &rArr; hal_spi_transfer_revice_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_transfer_revice_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_w25qxx.o(i.w25qxx_init)
</UL>
<P><STRONG><a name="[1e4]"></a>write_global_settings</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, settings.o(i.write_global_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write_global_settings &rArr; memcpy_to_eeprom_with_checksum &rArr; hal_eeprom_flush &rArr; hal_flash_write_buff &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
</UL>

<P><STRONG><a name="[1f0]"></a>xPortStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1a3]"></a>xQueueGenericCreate</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1ad]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1ff]"></a>xQueueGenericSend</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[202]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1ba]"></a>xQueueReceive</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[201]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[134]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task_creat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grbl_task_create
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[204]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1bf]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[c4]"></a>xTaskIncrementTick</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1aa]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1b5]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[1bd]"></a>xTaskResumeAll</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1ef]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1b7]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[96]"></a>FLASH_Program_Byte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[99]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[97]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[98]"></a>FLASH_Program_Word</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[8f]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[92]"></a>FLASH_MassErase</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[a4]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[a5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[bf]"></a>UART_SetConfig</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c1]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[af]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[c3]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[145]"></a>hal_motor_axis_gpio_init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, hal_gpio.o(i.hal_motor_axis_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_motor_axis_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_motor_gpio_init
</UL>

<P><STRONG><a name="[146]"></a>hal_motor_dir_gpio_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hal_gpio.o(i.hal_motor_dir_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_motor_dir_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_motor_gpio_init
</UL>

<P><STRONG><a name="[147]"></a>hal_motor_en_gpio_init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, hal_gpio.o(i.hal_motor_en_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_motor_en_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_motor_gpio_init
</UL>

<P><STRONG><a name="[160]"></a>hal_w25qxx_spi_gpio_init</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, hal_w25qxx.o(i.hal_w25qxx_spi_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_w25qxx_spi_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_w25qxx_spi_init
</UL>

<P><STRONG><a name="[17f]"></a>plan_compute_profile_parameters</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, planner.o(i.plan_compute_profile_parameters))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[188]"></a>plan_prev_block_index</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, planner.o(i.plan_prev_block_index))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
</UL>

<P><STRONG><a name="[181]"></a>planner_recalculate</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, planner.o(i.planner_recalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = planner_recalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_next_block_index
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_prev_block_index
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[190]"></a>protocol_exec_rt_suspend</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, protocol.o(i.protocol_exec_rt_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_get_state
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_accessory_override_flag
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_safety_door_ajar
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[1d4]"></a>report_util_axis_values</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, report.o(i.report_util_axis_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = report_util_axis_values &rArr; printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[1ca]"></a>report_util_feedback_line_feed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, report.o(i.report_util_feedback_line_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = report_util_feedback_line_feed &rArr; report_util_line_feed &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
</UL>

<P><STRONG><a name="[1d2]"></a>report_util_float_setting</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, report.o(i.report_util_float_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = report_util_float_setting &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_setting_prefix
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
</UL>

<P><STRONG><a name="[1cd]"></a>report_util_gcode_modes_G</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, report.o(i.report_util_gcode_modes_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = report_util_gcode_modes_G &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
</UL>

<P><STRONG><a name="[1ce]"></a>report_util_gcode_modes_M</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, report.o(i.report_util_gcode_modes_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = report_util_gcode_modes_M &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
</UL>

<P><STRONG><a name="[1c8]"></a>report_util_line_feed</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, report.o(i.report_util_line_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = report_util_line_feed &rArr; printString &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
</UL>

<P><STRONG><a name="[1d1]"></a>report_util_uint8_setting</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, report.o(i.report_util_uint8_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = report_util_uint8_setting &rArr; report_util_setting_prefix &rArr; print_uint8_base10 &rArr; serial_write &rArr; hal_uart_sendbyte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_setting_prefix
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
</UL>

<P><STRONG><a name="[1e8]"></a>st_next_block_index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stepper.o(i.st_next_block_index))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[1a7]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1a9]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[1ac]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1b2]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1b3]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b4]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1c2]"></a>prvUnlockQueue</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[19b]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[19f]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1a5]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1a6]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[6c]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1ae]"></a>prvInitialiseNewTask</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1a0]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[203]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1a1]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1c1]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1b1]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[1b6]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1b8]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1bb]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1b9]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1c0]"></a>prvSwitchTimerLists</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[6f]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[1c5]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1c6]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6b]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[eb]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; w25qxx_buffer_write &rArr; w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[107]"></a>find_volume</STRONG> (Thumb, 966 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; w25qxx_buffer_write &rArr; w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[101]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[104]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[103]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[ec]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; w25qxx_buffer_write &rArr; w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[17d]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sync_window &rArr; disk_write &rArr; w25qxx_buffer_write &rArr; w25qxx_page_write &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr_reg &rArr; w25qxx_read_write_byte &rArr; w25qxx_read_write_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[cf]"></a>_printf_core</STRONG> (Thumb, 660 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
